Quickstart, using Chat Models
Chat models are a variation on language models.
While chat models use language models under the hood, the interface they expose is a bit different.
Rather than expose a "text in, text out" API, they expose an interface where "chat messages" are the inputs and outputs.
Chat model APIs are fairly new, so we are still figuring out the correct abstractions.
Installation and Setup​
To get started, follow the installation instructions to install LangChain.
Getting Started​
This section covers how to get started with chat models. The interface is based around messages rather than raw text.
Here we create a chat model using the API key stored in the environment variable OPENAI_API_KEY. We'll be calling this chat model throughout this section.
Chat Models: Message in, Message out​
You can get chat completions by passing one or more messages to the chat model. The response will also be a message. The types of messages currently supported in LangChain are AIChatMessage, HumanChatMessage, SystemChatMessage, and a generic ChatMessage -- ChatMessage takes in an arbitrary role parameter, which we won't be using here. Most of the time, you'll just be dealing with HumanChatMessage, AIChatMessage, and SystemChatMessage.
Multiple Messages​
OpenAI's chat-based models (currently gpt-3.5-turbo and gpt-4) support multiple messages as input. See here for more information. Here is an example of sending a system and user message to the chat model:
Multiple Completions​
You can go one step further and generate completions for multiple sets of messages using generate. This returns an LLMResult with an additional message parameter.
Chat Prompt Templates: Manage Prompts for Chat Models​
You can make use of templating by using a MessagePromptTemplate. You can build a ChatPromptTemplate from one or more MessagePromptTemplates. You can use ChatPromptTemplate's formatPromptValue -- this returns a PromptValue, which you can convert to a string or Message object, depending on whether you want to use the formatted value as input to an llm or chat model.
Continuing with the previous example:
First we create a reusable template:
Then we can use the template to generate a response:
Model + Prompt = LLMChain​
This pattern of asking for the completion of a formatted prompt is quite common, so we introduce the next piece of the puzzle: LLMChain
Then you can call the chain:
The chain will internally accumulate the messages sent to the model, and the ones received as output. Then it will inject the messages into the prompt on the next call. So you can call the chain a few times, and it remembers previous messages:
Agents: Dynamically Run Chains Based on User Input​
Finally, we introduce Tools and Agents, which extend the model with other abilities, such as search, or a calculator.
A tool is a function that takes a string (such as a search query) and returns a string (such as a search result). They also have a name and description, which are used by the chat model to identify which tool it should call.
An agent is a stateless wrapper around an agent prompt chain (such as MRKL) which takes care of formatting tools into the prompt, as well as parsing the responses obtained from the chat model.
To make agents more powerful we need to make them iterative, ie. call the model multiple times until they arrive at the final answer. That's the job of the AgentExecutor.
And finally, we can use the AgentExecutor to run an agent:
Memory: Add State to Chains and Agents​
You can also use the chain to store state. This is useful for eg. chatbots, where you want to keep track of the conversation history. MessagesPlaceholder is a special prompt template that will be replaced with the messages passed in each call.
Streaming​
You can also use the streaming API to get words streamed back to you as they are generated. This is useful for eg. chatbots, where you want to show the user what is being generated as it is being generated. Note: OpenAI as of this writing does not support tokenUsage reporting while streaming is enabled.
